// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String
  name          String
  avatar        String?
  role          Role           @default(USER)
  isVerified    Boolean        @default(false)  
  otp           String?                       
  otpExpiresAt  DateTime?                     
  otpAttempts   Int           @default(0)      
  otpLastSent   DateTime?                    
  refreshTokens RefreshToken[]
  tours         Tour[]         @relation("TourGuide")
  bookings      Booking[]
  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  likedPosts    PostLike[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Tour {
  id          String    @id @default(uuid())
  title       String
  description String
  location    String
  price       Decimal   @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  capacity    Int
  imageUrl    String?
  category    String
  guideId     String?
  guide       User?     @relation("TourGuide", fields: [guideId], references: [id])
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("tours")
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  tourId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour            Tour          @relation(fields: [tourId], references: [id])
  bookingDate     DateTime      @default(now())
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  amount          Decimal       @db.Decimal(10, 2)
  specialRequests String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("bookings")
}

model Post {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String     @db.Text
  imageUrl  String?
  likes     Int        @default(0)
  comments  Comment[]
  likedBy   PostLike[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false)
  relatedId String?
  createdAt DateTime         @default(now())

  @@map("notifications")
}

model PostLike {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@map("post_likes")
}

enum Role {
  USER
  ADMIN
  GUIDE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  TOUR_REMINDER
  POST_LIKED
  POST_COMMENTED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
}
